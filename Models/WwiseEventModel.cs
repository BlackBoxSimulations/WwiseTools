// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Common.Wwise.Models;
//
//    var wwiseEventModel = WwiseEventModel.FromJson(jsonString);

namespace Common.Wwise.Models
{
  using System;
  using System.Collections.Generic;

  using System.Globalization;
  using Newtonsoft.Json;
  using Newtonsoft.Json.Converters;
  [System.Serializable]
  public partial class WwiseEventModel
  {
    [JsonProperty("?xml", NullValueHandling = NullValueHandling.Ignore)]
    public Xml Xml;

    [JsonProperty("WwiseDocument", NullValueHandling = NullValueHandling.Ignore)]
    public WwiseDocument WwiseDocument;
  }

  [System.Serializable]
  public partial class WwiseDocument
  {
    [JsonProperty("@Type", NullValueHandling = NullValueHandling.Ignore)]
    public string Type;

    [JsonProperty("@ID", NullValueHandling = NullValueHandling.Ignore)]
    public string Id;

    [JsonProperty("@SchemaVersion", NullValueHandling = NullValueHandling.Ignore)]
    public string SchemaVersion;

    [JsonProperty("Events", NullValueHandling = NullValueHandling.Ignore)]
    public Events Events;
  }

  [System.Serializable]
  public partial class Events
  {
    [JsonProperty("WorkUnit", NullValueHandling = NullValueHandling.Ignore)]
    public WorkUnit WorkUnit;
  }

  [System.Serializable]
  public partial class WorkUnit
  {
    [JsonProperty("@Name", NullValueHandling = NullValueHandling.Ignore)]
    public string Name;

    [JsonProperty("@ID", NullValueHandling = NullValueHandling.Ignore)]
    public string Id;

    [JsonProperty("@PersistMode", NullValueHandling = NullValueHandling.Ignore)]
    public string PersistMode;

    [JsonProperty("ChildrenList", NullValueHandling = NullValueHandling.Ignore)]
    public WorkUnitChildrenList ChildrenList;
  }

  [System.Serializable]
  public partial class WorkUnitChildrenList
  {
    [JsonProperty("Event", NullValueHandling = NullValueHandling.Ignore)]
    public List<Event> Event;
  }

  [System.Serializable]
  public partial class Event
  {
    [JsonProperty("@Name", NullValueHandling = NullValueHandling.Ignore)]
    public string Name;

    [JsonProperty("@ID", NullValueHandling = NullValueHandling.Ignore)]
    public string Id;

    [JsonProperty("ChildrenList", NullValueHandling = NullValueHandling.Ignore)]
    public EventChildrenList ChildrenList;
  }

  [System.Serializable]
  public partial class EventChildrenList
  {
    [JsonProperty("Action", NullValueHandling = NullValueHandling.Ignore)]
    public ActionUnion? Action;
  }

  [System.Serializable]
  public partial class ActionElement
  {
    [JsonProperty("@Name", NullValueHandling = NullValueHandling.Ignore)]
    public string Name;

    [JsonProperty("@ID", NullValueHandling = NullValueHandling.Ignore)]
    public string Id;

    [JsonProperty("@ShortID", NullValueHandling = NullValueHandling.Ignore)]
    public string ShortId;

    [JsonProperty("PropertyList", NullValueHandling = NullValueHandling.Ignore)]
    public PurplePropertyList PropertyList;

    [JsonProperty("ReferenceList", NullValueHandling = NullValueHandling.Ignore)]
    public ReferenceList ReferenceList;
  }

  [System.Serializable]
  public partial class PurplePropertyList
  {
    [JsonProperty("Property", NullValueHandling = NullValueHandling.Ignore)]
    public FluffyProperty? Property;
  }

  [System.Serializable]
  public partial class PropertyListPropertyClass
  {
    [JsonProperty("@Name", NullValueHandling = NullValueHandling.Ignore)]
    public string Name;

    [JsonProperty("@Type", NullValueHandling = NullValueHandling.Ignore)]
    public string Type;

    [JsonProperty("@Value", NullValueHandling = NullValueHandling.Ignore)]
    public string Value;
  }

  [System.Serializable]
  public partial class ReferenceList
  {
    [JsonProperty("Reference", NullValueHandling = NullValueHandling.Ignore)]
    public Reference Reference;
  }

  [System.Serializable]
  public partial class Reference
  {
    [JsonProperty("@Name", NullValueHandling = NullValueHandling.Ignore)]
    public string Name;

    [JsonProperty("ObjectRef", NullValueHandling = NullValueHandling.Ignore)]
    public ObjectRef ObjectRef;
  }

  [System.Serializable]
  public partial class ObjectRef
  {
    [JsonProperty("@Name", NullValueHandling = NullValueHandling.Ignore)]
    public string Name;

    [JsonProperty("@ID", NullValueHandling = NullValueHandling.Ignore)]
    public string Id;

    [JsonProperty("@WorkUnitID", NullValueHandling = NullValueHandling.Ignore)]
    public string WorkUnitId;
  }

  [System.Serializable]
  public partial class PurpleAction
  {
    [JsonProperty("@Name", NullValueHandling = NullValueHandling.Ignore)]
    public string Name;

    [JsonProperty("@ID", NullValueHandling = NullValueHandling.Ignore)]
    public string Id;

    [JsonProperty("@ShortID", NullValueHandling = NullValueHandling.Ignore)]
    public string ShortId;

    [JsonProperty("PropertyList", NullValueHandling = NullValueHandling.Ignore)]
    public FluffyPropertyList PropertyList;

    [JsonProperty("ReferenceList", NullValueHandling = NullValueHandling.Ignore)]
    public ReferenceList ReferenceList;
  }

  [System.Serializable]
  public partial class FluffyPropertyList
  {
    [JsonProperty("Property", NullValueHandling = NullValueHandling.Ignore)]
    public TentacledProperty? Property;
  }

  [System.Serializable]
  public partial class PurpleProperty
  {
    [JsonProperty("@Name", NullValueHandling = NullValueHandling.Ignore)]
    public string Name;

    [JsonProperty("@Type", NullValueHandling = NullValueHandling.Ignore)]
    public string Type;

    [JsonProperty("@Value", NullValueHandling = NullValueHandling.Ignore)]
    public string Value;

    [JsonProperty("ModifierList", NullValueHandling = NullValueHandling.Ignore)]
    public ModifierList ModifierList;
  }

  [System.Serializable]
  public partial class ModifierList
  {
    [JsonProperty("ModifierInfo", NullValueHandling = NullValueHandling.Ignore)]
    public ModifierInfo ModifierInfo;
  }

  [System.Serializable]
  public partial class ModifierInfo
  {
    [JsonProperty("Modifier", NullValueHandling = NullValueHandling.Ignore)]
    public Modifier Modifier;
  }

  [System.Serializable]
  public partial class Modifier
  {
    [JsonProperty("@Name", NullValueHandling = NullValueHandling.Ignore)]
    public string Name;

    [JsonProperty("@ID", NullValueHandling = NullValueHandling.Ignore)]
    public string Id;

    [JsonProperty("PropertyList", NullValueHandling = NullValueHandling.Ignore)]
    public ModifierPropertyList PropertyList;
  }

  [System.Serializable]
  public partial class ModifierPropertyList
  {
    [JsonProperty("Property", NullValueHandling = NullValueHandling.Ignore)]
    public List<PropertyListPropertyClass> Property;
  }

  [System.Serializable]
  public partial class Xml
  {
    [JsonProperty("@version", NullValueHandling = NullValueHandling.Ignore)]
    public string Version;

    [JsonProperty("@encoding", NullValueHandling = NullValueHandling.Ignore)]
    public string Encoding;
  }

  [System.Serializable]
  public partial struct FluffyProperty
  {
    public PropertyListPropertyClass PropertyListPropertyClass;
    public List<PropertyListPropertyClass> PropertyListPropertyClassArray;

    public static implicit operator FluffyProperty(PropertyListPropertyClass PropertyListPropertyClass) => new FluffyProperty { PropertyListPropertyClass = PropertyListPropertyClass };
    public static implicit operator FluffyProperty(List<PropertyListPropertyClass> PropertyListPropertyClassArray) => new FluffyProperty { PropertyListPropertyClassArray = PropertyListPropertyClassArray };
  }

  [System.Serializable]
  public partial struct TentacledProperty
  {
    public PropertyListPropertyClass PropertyListPropertyClass;
    public List<PurpleProperty> PurplePropertyArray;

    public static implicit operator TentacledProperty(PropertyListPropertyClass PropertyListPropertyClass) => new TentacledProperty { PropertyListPropertyClass = PropertyListPropertyClass };
    public static implicit operator TentacledProperty(List<PurpleProperty> PurplePropertyArray) => new TentacledProperty { PurplePropertyArray = PurplePropertyArray };
  }

  [System.Serializable]
  public partial struct ActionUnion
  {
    public List<ActionElement> ActionElementArray;
    public PurpleAction PurpleAction;

    public static implicit operator ActionUnion(List<ActionElement> ActionElementArray) => new ActionUnion { ActionElementArray = ActionElementArray };
    public static implicit operator ActionUnion(PurpleAction PurpleAction) => new ActionUnion { PurpleAction = PurpleAction };
  }

  public partial class WwiseEventModel
  {
    public static WwiseEventModel FromJson(string json) => JsonConvert.DeserializeObject<WwiseEventModel>(json, Blackbox.Wwise.Model.Converter.Settings);
  }

  public static class Serialize
  {
    public static string ToJson(this WwiseEventModel self) => JsonConvert.SerializeObject(self, Blackbox.Wwise.Model.Converter.Settings);
  }

  internal static class Converter
  {
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
      MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
      DateParseHandling = DateParseHandling.None,
      Converters =
            {
                ActionUnionConverter.Singleton,
                FluffyPropertyConverter.Singleton,
                TentacledPropertyConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
    };
  }

  internal class ActionUnionConverter : JsonConverter
  {
    public override bool CanConvert(Type t) => t == typeof(ActionUnion) || t == typeof(ActionUnion?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
      switch (reader.TokenType)
      {
        case JsonToken.StartObject:
          var objectValue = serializer.Deserialize<PurpleAction>(reader);
          return new ActionUnion { PurpleAction = objectValue };
        case JsonToken.StartArray:
          var arrayValue = serializer.Deserialize<List<ActionElement>>(reader);
          return new ActionUnion { ActionElementArray = arrayValue };
      }
      throw new Exception("Cannot unmarshal type ActionUnion");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
      var value = (ActionUnion)untypedValue;
      if (value.ActionElementArray != null)
      {
        serializer.Serialize(writer, value.ActionElementArray);
        return;
      }
      if (value.PurpleAction != null)
      {
        serializer.Serialize(writer, value.PurpleAction);
        return;
      }
      throw new Exception("Cannot marshal type ActionUnion");
    }

    public static readonly ActionUnionConverter Singleton = new ActionUnionConverter();
  }

  internal class FluffyPropertyConverter : JsonConverter
  {
    public override bool CanConvert(Type t) => t == typeof(FluffyProperty) || t == typeof(FluffyProperty?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
      switch (reader.TokenType)
      {
        case JsonToken.StartObject:
          var objectValue = serializer.Deserialize<PropertyListPropertyClass>(reader);
          return new FluffyProperty { PropertyListPropertyClass = objectValue };
        case JsonToken.StartArray:
          var arrayValue = serializer.Deserialize<List<PropertyListPropertyClass>>(reader);
          return new FluffyProperty { PropertyListPropertyClassArray = arrayValue };
      }
      throw new Exception("Cannot unmarshal type FluffyProperty");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
      var value = (FluffyProperty)untypedValue;
      if (value.PropertyListPropertyClassArray != null)
      {
        serializer.Serialize(writer, value.PropertyListPropertyClassArray);
        return;
      }
      if (value.PropertyListPropertyClass != null)
      {
        serializer.Serialize(writer, value.PropertyListPropertyClass);
        return;
      }
      throw new Exception("Cannot marshal type FluffyProperty");
    }

    public static readonly FluffyPropertyConverter Singleton = new FluffyPropertyConverter();
  }

  internal class TentacledPropertyConverter : JsonConverter
  {
    public override bool CanConvert(Type t) => t == typeof(TentacledProperty) || t == typeof(TentacledProperty?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
      switch (reader.TokenType)
      {
        case JsonToken.StartObject:
          var objectValue = serializer.Deserialize<PropertyListPropertyClass>(reader);
          return new TentacledProperty { PropertyListPropertyClass = objectValue };
        case JsonToken.StartArray:
          var arrayValue = serializer.Deserialize<List<PurpleProperty>>(reader);
          return new TentacledProperty { PurplePropertyArray = arrayValue };
      }
      throw new Exception("Cannot unmarshal type TentacledProperty");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
      var value = (TentacledProperty)untypedValue;
      if (value.PurplePropertyArray != null)
      {
        serializer.Serialize(writer, value.PurplePropertyArray);
        return;
      }
      if (value.PropertyListPropertyClass != null)
      {
        serializer.Serialize(writer, value.PropertyListPropertyClass);
        return;
      }
      throw new Exception("Cannot marshal type TentacledProperty");
    }

    public static readonly TentacledPropertyConverter Singleton = new TentacledPropertyConverter();
  }
}
